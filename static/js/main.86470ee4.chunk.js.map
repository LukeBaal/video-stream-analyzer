{"version":3,"sources":["context/GlobalReducer.js","context/GlobalState.jsx","components/FileDrop.jsx","components/DropWrapper.jsx","components/Table.jsx","components/Overview.jsx","components/Results.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["reducer","state","action","type","files","payload","filter","file","url","diffs","initialState","worker","Worker","GlobalContext","createContext","GlobalProvider","props","useReducer","GlobalReducer","dispatch","Provider","value","addFiles","newFiles","onmessage","e","data","i","length","push","item","f","name","postMessage","deleteFile","filename","children","FileDrop","onDrop","useState","drag","setDrag","dropRef","createRef","dragCounter","handleDrag","preventDefault","stopPropagation","handleDragIn","dataTransfer","items","handleDragOut","handleDrop","clearData","useEffect","div","current","addEventListener","removeEventListener","ref","className","DropWrapper","useContext","map","onClick","target","innerHTML","onBadgeClick","Table","header","Object","keys","key","body","entry","index","Overview","info","duration","style","marginRight","bit_rate","streams","Results","App","width","margin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.86470ee4.chunk.js","sourcesContent":["\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_FILES':\r\n            return {\r\n                ...state,\r\n                files: [...state.files, ...action.payload]\r\n            }\r\n        case 'DELETE_FILE':\r\n            return {\r\n                ...state,\r\n                files: state.files.filter(file => file.url !== action.payload)\r\n            }\r\n        case 'SET_DIFFS':\r\n            return {\r\n                ...state,\r\n                diffs: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React, {createContext, useReducer} from 'react'\r\nimport GlobalReducer from './GlobalReducer';\r\n\r\n\r\nconst initialState = {\r\n    files: [],\r\n    diffs: [],\r\n    worker: new Worker(\"ffprobe-worker.js\")\r\n}\r\n\r\nexport const mapToType = [\"VIDEO\", \"AUDIO\"];\r\n\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = props => {\r\n    const [state, dispatch] = useReducer(GlobalReducer, initialState);\r\n    const { worker } = state;\r\n\r\n    function determineDiffs(newFiles) {\r\n        const files = [...state.files, ...newFiles];\r\n        const diffs = [];\r\n        console.log(\"GET DIFFS\", files);\r\n\r\n        if (files.length > 0) {\r\n            Object.keys(files[0]).forEach(key => {\r\n                switch(key) {\r\n                    case 'start_time':\r\n                    case 'duration':\r\n                    case 'codec_name':\r\n                    case 'format':\r\n                    case 'bit_rate':\r\n                    case 'channels':\r\n                    case 'sample_rate':\r\n                    case 'frame_size':\r\n                        let prev = null;\r\n                        for (const file of files) {\r\n                            if (prev == null && file[key]) {\r\n                                prev = file;\r\n                            } else if (prev[key] !== file[key]){\r\n                                diffs.push(key);\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n            \r\n            console.log(diffs);\r\n            dispatch({\r\n                type: 'SET_DIFFS',\r\n                payload: diffs\r\n            });\r\n        }\r\n    }\r\n\r\n    function addFiles(newFiles) {\r\n        worker.onmessage = e => {\r\n            dispatch({\r\n                type: \"ADD_FILES\",\r\n                payload: e.data\r\n            });\r\n\r\n            // determineDiffs(e.data);\r\n        };\r\n    \r\n        let files = [];\r\n        for (let i = 0; i < newFiles.length; i++) {\r\n            files.push(newFiles.item(i));\r\n        }\r\n\r\n        files = files\r\n            .filter(file => state.files\r\n            .filter(f => f.url === file.name).length === 0);\r\n            // .map(f => f ({\r\n            //     ...f,\r\n            //     streams: f.streams.map(stream => ({ \r\n            //         ...stream, \r\n            //         type: mapToType.length > stream.codec_type ? mapToType(stream.codec_type) : \"UNKNOWN\" \r\n            //     }))\r\n            // }));\r\n\r\n    \r\n        worker.postMessage([\"get_file_info\", files]);\r\n    }\r\n\r\n    function deleteFile(filename) {\r\n        dispatch({\r\n            type: \"DELETE_FILE\",\r\n            payload: filename\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                files: state.files,\r\n                diffs: state.diffs,\r\n                addFiles,\r\n                deleteFile\r\n            }}\r\n        >\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n","import React, {useEffect, useState, createRef} from 'react';\r\n\r\nconst FileDrop = ({ onDrop }) => {\r\n    const [drag, setDrag] = useState(false);\r\n    const [filename, setFilename] = useState('');\r\n    let dropRef = createRef();\r\n    let dragCounter = 0;\r\n  \r\n    const handleDrag = e => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    };\r\n  \r\n    const handleDragIn = e => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      dragCounter++;\r\n      if (e.dataTransfer.items && e.dataTransfer.items.length > 0) setDrag(true);\r\n    };\r\n  \r\n    const handleDragOut = e => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      dragCounter--;\r\n      if (dragCounter === 0) setDrag(false);\r\n    };\r\n  \r\n    const handleDrop = e => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      setDrag(false);\r\n      if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n        onDrop(e.dataTransfer.files);\r\n        // setFilename(e.dataTransfer.files[0].name);\r\n        e.dataTransfer.clearData();\r\n        dragCounter = 0;\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      let div = dropRef.current;\r\n      div.addEventListener('dragenter', handleDragIn);\r\n      div.addEventListener('dragleave', handleDragOut);\r\n      div.addEventListener('dragover', handleDrag);\r\n      div.addEventListener('drop', handleDrop);\r\n      return () => {\r\n        div.removeEventListener('dragenter', handleDragIn);\r\n        div.removeEventListener('dragleave', handleDragOut);\r\n        div.removeEventListener('dragover', handleDrag);\r\n        div.removeEventListener('drop', handleDrop);\r\n      };\r\n    });\r\n  \r\n    return (\r\n      <div\r\n        ref={dropRef}\r\n        className={\r\n          drag ? 'filedrop drag' : filename ? 'filedrop ready' : 'filedrop'\r\n        }\r\n      >\r\n        {filename && !drag ? <div>{filename}</div> : <div>Drop a file here!</div>}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default FileDrop;","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport FileDrop from './FileDrop'\r\n\r\nconst DropWrapper = () => {\r\n    const { files, addFiles, deleteFile } = useContext(GlobalContext);\r\n\r\n    const onBadgeClick = e => {\r\n        deleteFile(e.target.innerHTML);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FileDrop onDrop={e => addFiles(e) } />\r\n            {files.map(file => (\r\n                <span key={`badge${file.url}`} className=\"badge badge-light badge-pill mr-1 file-badge\" onClick={e => onBadgeClick(e)}>{file.url}</span>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropWrapper\r\n","import React from \"react\";\r\n// import { mapToType } from '../context/GlobalState';\r\n\r\nconst Table = (props) => {\r\n  const data = props.data ?? [];\r\n\r\n  const header = Object.keys(data[0] ?? []).map((key) => <th key={`th${key}`}>{key}</th>);\r\n\r\n  const body = data.map((entry, index) => (\r\n    <tr key={index}> \r\n      {/* <td>{entry.codec_type && mapToType.length > entry.codec_type ? mapToType[entry.codec_type] : null}</td> */}\r\n      {Object.keys(entry ?? []).map((key) => (\r\n          <td key={key}>{entry[key]}</td>\r\n      ))}\r\n    </tr>\r\n    )\r\n  );\r\n\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table table-dark table-hover\">\r\n        <thead>\r\n          <tr>\r\n            {/* <th>Type</th> */}\r\n            {header && header.length > 0 ? header : null}\r\n          </tr>\r\n        </thead>\r\n        <tbody>{body && body.length > 0 ? body : null}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Table from './Table';\r\n\r\nconst Overview = props => {\r\n    const { info } = props;\r\n\r\n    const { duration } = info;\r\n    // const metadata = {\r\n    //     name: info.name,\r\n    //     duration: duration,\r\n    //     bitrate: info.bit_rate,\r\n    //     url: info.url,\r\n    //     nb_streams: info.nb_streams,\r\n    //     flags: info.flags\r\n    // };\r\n\r\n    return (\r\n        <div className=\"card mt-1\">\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title\">{info.url}</h4>\r\n                <h6 className=\"card-subtitle mb-2\">\r\n                    <span style={{ marginRight: \"1em\"}}>Duration: {info.duration}</span>\r\n                    <span>Bitrate: {info.bit_rate}</span>\r\n                </h6>\r\n                {/* <div className=\"row\">\r\n                    <div className=\"col-md-3\">\r\n                        <h4>Version</h4>\r\n                        <StackedTable data={info.versions}/>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-3\">\r\n                        <h4>Metadata</h4>\r\n                        <StackedTable data={metadata}/>\r\n                    </div>\r\n                </div> */}\r\n                <div className=\"row\">\r\n                    <Table data={info.streams} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nOverview.propTypes = {\r\n    info: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Overview\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\n// import Diff from './Diff';\r\nimport Overview from './Overview'\r\n\r\nconst Results = () => {\r\n    const { files } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div className=\"mt-2\">\r\n            {files.map(file => (\r\n                <Overview key={file.url} info={file}/>\r\n            ))}\r\n            {/* {files && files.length > 0 && <Diff />} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport DropWrapper from './components/DropWrapper';\r\nimport { GlobalContext, GlobalProvider } from './context/GlobalState';\r\nimport Results from './components/Results';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{ width: \"95%\", margin: \"auto\"}}>\r\n      <GlobalProvider>\r\n        <DropWrapper />\r\n        {/* <FileInput /> */}\r\n        <Results />\r\n      </GlobalProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}