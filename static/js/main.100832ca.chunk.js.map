{"version":3,"sources":["context/GlobalReducer.js","context/GlobalState.jsx","components/Table.jsx","components/Overview.jsx","components/Results.jsx","components/FileDrop.jsx","components/DropWrapper.jsx","components/Navbar.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["reducer","state","action","type","files","payload","filter","file","url","diffs","initialState","worker","Worker","STREAM_TYPES","name","icon","mapToType","undefined","length","className","title","mapToIcon","GlobalContext","createContext","GlobalProvider","props","useReducer","GlobalReducer","dispatch","Provider","value","addFiles","newFiles","onmessage","e","console","log","data","map","streams","stream","id","start_time","duration","codec_name","format","bit_rate","time_base","width","height","channels","sample_rate","frame_size","codec_type","i","push","item","f","postMessage","deleteFile","filename","children","Table","header","Object","keys","key","body","entry","index","Overview","info","useContext","style","display","justifyContent","onClick","marginRight","Results","margin","FileDrop","onDrop","useState","drag","setDrag","dropRef","createRef","dragCounter","handleDrag","preventDefault","stopPropagation","handleDragIn","dataTransfer","items","handleDragOut","handleDrop","clearData","useEffect","div","current","addEventListener","removeEventListener","classNames","position","top","left","ref","DropWrapper","Navbar","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","activeClassName","exact","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.100832ca.chunk.js","sourcesContent":["\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_FILES':\r\n            return {\r\n                ...state,\r\n                files: [...state.files, ...action.payload]\r\n            }\r\n        case 'DELETE_FILE':\r\n            return {\r\n                ...state,\r\n                files: state.files.filter(file => file.url !== action.payload)\r\n            }\r\n        case 'SET_DIFFS':\r\n            return {\r\n                ...state,\r\n                diffs: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React, {createContext, useReducer} from 'react'\r\nimport GlobalReducer from './GlobalReducer';\r\n\r\n\r\nconst initialState = {\r\n    files: [],\r\n    diffs: [],\r\n    worker: new Worker(\"ffprobe-worker.js\")\r\n}\r\n\r\n// export const STREAM_TYPES = [\"VIDEO\", \"AUDIO\", \"DATA\", \"SUBTITLE\", \"ATTACHMENT\", \"NB\"];\r\nexport const STREAM_TYPES = [\r\n    { name: \"Video\", icon: \"film\" }, \r\n    { name: \"Audio\", icon: \"music\" },\r\n    { name: \"Data\", icon: \"database\" },\r\n    { name: 'Subtitle', icon: 'closed-captioning' },\r\n    { name: 'Attachement', icon: 'paperclip' }, \r\n    { name: \"NB\", icon: 'question'}\r\n];\r\n\r\nconst mapToIcon = type => <i className={`fas fa-${type.icon}`} title={type.name} />;\r\n\r\n/**\r\n * Convert stream type int to name\r\n * @param {number} type typeInt of stream codec type\r\n * @return The type name\r\n */\r\nexport const mapToType = type => {\r\n    if (type === null || type === undefined || type === -1 || type >= STREAM_TYPES.length) {\r\n        return \"UNKNOWN\";\r\n    } else {\r\n        return mapToIcon(STREAM_TYPES[type]);\r\n    }\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = props => {\r\n    const [state, dispatch] = useReducer(GlobalReducer, initialState);\r\n    const { worker } = state;\r\n\r\n    function determineDiffs(newFiles) {\r\n        const files = [...state.files, ...newFiles];\r\n        const diffs = [];\r\n        console.log(\"GET DIFFS\", files);\r\n\r\n        if (files.length > 0) {\r\n            Object.keys(files[0]).forEach(key => {\r\n                switch(key) {\r\n                    case 'start_time':\r\n                    case 'duration':\r\n                    case 'codec_name':\r\n                    case 'format':\r\n                    case 'bit_rate':\r\n                    case 'channels':\r\n                    case 'sample_rate':\r\n                    case 'frame_size':\r\n                        let prev = null;\r\n                        for (const file of files) {\r\n                            if (prev == null && file[key]) {\r\n                                prev = file;\r\n                            } else if (prev[key] !== file[key]){\r\n                                diffs.push(key);\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n            \r\n            console.log(diffs);\r\n            dispatch({\r\n                type: 'SET_DIFFS',\r\n                payload: diffs\r\n            });\r\n        }\r\n    }\r\n\r\n    function addFiles(newFiles) {\r\n        worker.onmessage = e => {\r\n            console.log(e.data);\r\n            const files = e.data.map(file => ({\r\n                ...file,\r\n                streams: file.streams?.map(stream => {\r\n                    const { id, start_time, duration, codec_name, format, bit_rate, time_base, width, height, channels, sample_rate, frame_size } = stream;\r\n                    return { \r\n                        id,\r\n                        type: mapToType(stream.codec_type),\r\n                        duration,\r\n                        bit_rate,\r\n                        time_base,\r\n                        codec_name,\r\n                        start_time,\r\n                        format,\r\n                        width,\r\n                        height,\r\n                        channels,\r\n                        sample_rate,\r\n                        frame_size\r\n                    }\r\n                })\r\n            }));\r\n\r\n            dispatch({\r\n                type: \"ADD_FILES\",\r\n                payload: files\r\n            });\r\n\r\n            // determineDiffs(e.data);\r\n        };\r\n    \r\n        let files = [];\r\n        for (let i = 0; i < newFiles.length; i++) {\r\n            files.push(newFiles.item(i));\r\n        }\r\n\r\n        files = files\r\n            .filter(file => state.files\r\n            .filter(f => f.url === file.name).length === 0)\r\n\r\n    \r\n        worker.postMessage([\"get_file_info\", files]);\r\n    }\r\n\r\n    function deleteFile(filename) {\r\n        dispatch({\r\n            type: \"DELETE_FILE\",\r\n            payload: filename\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                files: state.files,\r\n                diffs: state.diffs,\r\n                addFiles,\r\n                deleteFile\r\n            }}\r\n        >\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { mapToType } from '../context/GlobalState';\r\n\r\nconst Table = (props) => {\r\n  const data = props.data ?? [];\r\n\r\n  const header = Object.keys(data[0] ?? []).map((key) => <th key={`th${key}`}>{key}</th>);\r\n\r\n  const body = data.map((entry, index) => (\r\n    <tr key={index}> \r\n      {Object.keys(entry ?? []).map((key) => <td key={key}>{entry[key]}</td>)}\r\n    </tr>\r\n    )\r\n  );\r\n\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table table-dark table-hover\">\r\n        <thead>\r\n          <tr>\r\n            {header && header.length > 0 ? header : null}\r\n          </tr>\r\n        </thead>\r\n        <tbody>{body && body.length > 0 ? body : null}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Table from './Table';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst Overview = props => {\r\n    const { info } = props;\r\n    const { deleteFile } = useContext(GlobalContext);\r\n\r\n    // const { duration } = info;\r\n    // const metadata = {\r\n    //     name: info.name,\r\n    //     duration: duration,\r\n    //     bitrate: info.bit_rate,\r\n    //     url: info.url,\r\n    //     nb_streams: info.nb_streams,\r\n    //     flags: info.flags\r\n    // };\r\n\r\n    return (\r\n        <div className=\"card mt-1\">\r\n            <div className=\"card-body\">\r\n                <div className=\"card-title\" style={{ display: \"flex\", justifyContent: \"space-between\"}}>\r\n                    <h4>{info.url}</h4>\r\n                    <button className=\"btn btn-danger btn-sm\" onClick={() => deleteFile(info.url)}>X</button>\r\n                </div>\r\n                <h6 className=\"card-subtitle mb-2\">\r\n                    <span style={{ marginRight: \"1em\"}}>Duration: {info.duration}</span>\r\n                    <span>Bitrate: {info.bit_rate}</span>\r\n                </h6>\r\n                {/* <div className=\"row\">\r\n                    <div className=\"col-md-3\">\r\n                        <h4>Version</h4>\r\n                        <StackedTable data={info.versions}/>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-3\">\r\n                        <h4>Metadata</h4>\r\n                        <StackedTable data={metadata}/>\r\n                    </div>\r\n                </div> */}\r\n                <div className=\"row\">\r\n                    <Table data={info.streams} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nOverview.propTypes = {\r\n    info: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Overview\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\n// import Diff from './Diff';\r\nimport Overview from './Overview'\r\n\r\nconst Results = () => {\r\n    const { files } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div className=\"mt-2\" style={{ width: \"95%\", margin: \"auto\"}}>\r\n            {files.map(file => (\r\n                <Overview key={file.url} info={file}/>\r\n            ))}\r\n            {/* {files && files.length > 0 && <Diff />} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results\r\n","import React, {useEffect, useState, createRef, useContext} from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst FileDrop = ({ onDrop, children }) => {\r\n    const [drag, setDrag] = useState(false);\r\n    const { files } = useContext(GlobalContext);\r\n    // const [filename, setFilename] = useState('');\r\n    let dropRef = createRef();\r\n    let dragCounter = 0;\r\n  \r\n    const handleDrag = e => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    };\r\n  \r\n    const handleDragIn = e => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      dragCounter++;\r\n      if (e.dataTransfer.items && e.dataTransfer.items.length > 0) setDrag(true);\r\n    };\r\n  \r\n    const handleDragOut = e => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      dragCounter--;\r\n      if (dragCounter === 0) setDrag(false);\r\n    };\r\n  \r\n    const handleDrop = e => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      setDrag(false);\r\n      if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n        onDrop(e.dataTransfer.files);\r\n        // setFilename(e.dataTransfer.files[0].name);\r\n        e.dataTransfer.clearData();\r\n        dragCounter = 0;\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      let div = dropRef.current;\r\n      div.addEventListener('dragenter', handleDragIn);\r\n      div.addEventListener('dragleave', handleDragOut);\r\n      div.addEventListener('dragover', handleDrag);\r\n      div.addEventListener('drop', handleDrop);\r\n      return () => {\r\n        div.removeEventListener('dragenter', handleDragIn);\r\n        div.removeEventListener('dragleave', handleDragOut);\r\n        div.removeEventListener('dragover', handleDrag);\r\n        div.removeEventListener('drop', handleDrop);\r\n      };\r\n    });\r\n\r\n    let classNames = 'filedrop center-text-container';\r\n    if (drag) {\r\n      classNames += ' drag';\r\n    }\r\n    if (files.length === 0) {\r\n      classNames += ' border';\r\n    }\r\n  \r\n    return (\r\n      // <div\r\n      //   ref={dropRef}\r\n      //   className={\r\n      //     drag ? 'filedrop drag' : filename ? 'filedrop ready' : 'filedrop'\r\n      //   }\r\n      // >\r\n      //   {filename && !drag ? <div>{filename}</div> : <div>Drop a file here!</div>}\r\n      // </div>\r\n      <div \r\n        className={classNames}\r\n        style={{\r\n          position: \"relative\", \r\n          width: \"100%\", \r\n          height: \"100%\", \r\n          top: \"0\", \r\n          left: \"0\",\r\n\r\n        }}\r\n        ref={dropRef}\r\n      >\r\n        {files.length === 0 ? <h1>Drop Files Here</h1> : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default FileDrop;","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport FileDrop from './FileDrop'\r\n\r\nconst DropWrapper = () => {\r\n    const { addFiles } = useContext(GlobalContext);\r\n\r\n    // const onBadgeClick = e => {\r\n    //     deleteFile(e.target.innerHTML);\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <FileDrop onDrop={e => addFiles(e) } />\r\n            {/* {files.map(file => (\r\n                <span key={`badge${file.url}`} className=\"badge badge-light badge-pill mr-1 file-badge\" onClick={e => onBadgeClick(e)}>{file.url}</span>\r\n            ))} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropWrapper\r\n","import React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n            <NavLink className=\"navbar-brand\"to=\"/\">Video Analyzer</NavLink>\r\n            <button \r\n                className=\"navbar-toggler\" \r\n                type=\"button\" \r\n                data-toggle=\"collapse\" \r\n                data-target=\"#navbarColor01\" \r\n                aria-controls=\"navbarColor01\" \r\n                aria-expanded=\"false\" \r\n                aria-label=\"Toggle navigation\"\r\n            >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\"to=\"/\" activeClassName=\"active\" exact>Compare Files</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\"to=\"/streams\" activeClassName=\"active\">Compare Streams</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport { GlobalProvider } from './context/GlobalState';\r\nimport Results from './components/Results';\r\nimport DropWrapper from './components/DropWrapper'\r\nimport Navbar from './components/Navbar';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <GlobalProvider>\r\n          <Navbar />\r\n          <div id=\"main\">\r\n            <DropWrapper />\r\n            <Switch>\r\n              <Route path=\"/streams\">\r\n                <h1>streams</h1>\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Results />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </GlobalProvider>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}